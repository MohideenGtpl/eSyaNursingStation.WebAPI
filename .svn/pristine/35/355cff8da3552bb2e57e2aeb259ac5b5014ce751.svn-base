using eSyaNursingStation.DL.Entities;
using eSyaNursingStation.DO;
using eSyaNursingStation.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaNursingStation.DL.Repository
{
    public class PreOperativeRepository: IPreOperativeRepository
    {
        public async Task<DO_ReturnParameter> InsertIntoPreOperativeInformation(DO_PreOperativeInformation obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var sl = db.GtOpclin.Where(w => w.BusinessKey == obj.BusinessKey && w.Uhid == obj.UHID && w.Vnumber == obj.VisitNumber).Select(s => s.TransactionId).DefaultIfEmpty(0).Max() + 1;

                        int chartNumber = 0;


                        foreach (var c in obj.l_ControlValue)
                        {
                            if (!string.IsNullOrEmpty(c.Value))
                            {
                                GtOpclin cl = new GtOpclin
                                {
                                    BusinessKey = obj.BusinessKey,
                                    Uhid = obj.UHID,
                                    Vnumber = obj.VisitNumber,
                                    TransactionId = sl,
                                    TransactionDate = obj.TransactionDate,
                                    Cltype = c.CLType,
                                    ClcontrolId = c.CLControlID,
                                    ValueType = c.ValueType,
                                    Value = c.Value,
                                    ChartNumber = chartNumber,
                                    ActiveStatus = true,
                                    FormId = obj.FormID,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID
                                };
                                db.GtOpclin.Add(cl);
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Saved Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        //public async Task<List<DO_PreOperativeInformation>> GetPreOperativeInformationValueByTransaction(int businessKey, int UHID, int vNumber, int transactionID)
        //{
        //    using (var db = new eSyaEnterprise())
        //    {
        //        var cl = await db.Gtopotan
        //                .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && w.Ipnumber == vNumber
        //                   && w.TransactionId == transactionID
        //                   && w.ActiveStatus)
        //                .Select(x => new DO_PreOperativeInformation
        //                {
        //                    TransactionID = x.TransactionId,
        //                    TransactionDate = x.TransactionDate,
        //                    CLControlID = x.OtcontrolId,
        //                    ValueType = x.ValueType,
        //                    Value = x.Value
        //                }).ToListAsync();

        //        return cl;
        //    }
        //}

        public async Task<List<DO_PreOperativeInformation>> GetInformationValueView(int businessKey, int UHID, int vNumber, string clType)
        {
            using (var db = new eSyaEnterprise())
            {
                var ip = await db.GtOpclin
                        .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && w.Vnumber == vNumber
                           && w.Cltype == clType && w.ActiveStatus)
                        .Select(x => new DO_PreOperativeInformation
                        {
                            TransactionID = x.TransactionId,
                            TransactionDate = x.TransactionDate,
                            ChartNumber = x.ChartNumber,                           
                        }).Distinct().ToListAsync();

                var cl = ip.Select(x => new DO_PreOperativeInformation
                {
                    TransactionID = x.TransactionID,
                    TransactionDate = x.TransactionDate,
                    ChartNumber = x.ChartNumber,
                    l_ControlValue = db.GtOpclin.Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && w.Vnumber == vNumber
                                                            && w.Cltype == clType && w.TransactionId == x.TransactionID && w.ActiveStatus)
                                        .Select(c => new DO_ControlValue
                                        {
                                            CLControlID = c.ClcontrolId,
                                            CLType = c.Cltype,
                                            Value = c.Value
                                        }).ToList()
                }).OrderBy(o => o.TransactionDate).ToList();


                return cl;
            }
        }

    }
}
